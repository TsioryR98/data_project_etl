env_file:
  - .env
x-airflow-common:
  &airflow-common
  build: ./airflow  # Utilisation Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://airflow-apiserver:8080/execution/
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ../raw:/opt/airflow/raw
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./config:/opt/airflow/config
    - ./tmp:/opt/airflow/tmp
    - ./data:/opt/airflow/data
  user: "${AIRFLOW_UID:-1000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:15
    user: "999:999"
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow 
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test:
        - CMD
        - pg_isready
        - '-U'
        - airflow
      interval: 10s
      retries: 5
      start_period: 5s
    ports:
      - "5433:5432"
    profiles: ["etl"]

  jupyter:
    image: jupyter/scipy-notebook:latest  
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work  
      - ./airflow/tmp:/home/jovyan/shared_exports
    user: "1000:0"
    profiles: ["notebook"]

  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    hostname: metabase
    ports:
      - 3000:3000
    user: "1000:0"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: airflow
      MB_DB_USER: airflow
      MB_DB_PASS: airflow
      MB_DB_HOST: postgres
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
    volumes:
      - ./metabase/dashboards:/metabase-data/dashboards
    profiles: ["dataviz"]

  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test:
        - CMD
        - curl
        - '--fail'
        - http://localhost:8080/api/v2/version
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    profiles: ["etl"]

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test:
        - CMD
        - curl
        - '--fail'
        - http://localhost:8974/health
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    profiles: ["etl"]

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test:
        - CMD-SHELL
        - airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    profiles: ["etl"]
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test:
        - CMD-SHELL
        - airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    #user: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
    environment:
      API_KEY: ${AIRFLOW_PROJ_DIR}
    profiles: ["etl"]

  airflow-init:
    <<: *airflow-common
    #manually write env instead of common
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://airflow-apiserver:8080/execution/
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      AIRFLOW_CONFIG: /opt/airflow/config/airflow.cfg
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _AIRFLOW_WWW_USER_EMAIL: ${_AIRFLOW_WWW_USER_EMAIL:-admin@example.com}
      _AIRFLOW_WWW_USER_FIRSTNAME: ${_AIRFLOW_WWW_USER_FIRSTNAME:-Admin}
      _AIRFLOW_WWW_USER_LASTNAME: ${_AIRFLOW_WWW_USER_LASTNAME:-User}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    entrypoint: /bin/bash
    command:
      - -c
      - |
        export AIRFLOW_UID=${AIRFLOW_UID:-1000}
        export AIRFLOW_GID=${AIRFLOW_GID:-0}   
        mkdir -p /opt/airflow/{logs,dags,plugins,config,data,tmp}
        
        echo "Initializing Airflow database..."
        /entrypoint airflow db migrate
        
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
    profiles: ["etl"]

volumes:
  postgres_data:
